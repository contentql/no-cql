import { env } from '@env'
import configPromise from '@payload-config'
import type { Metadata, Viewport } from 'next'
import { unstable_cache } from 'next/cache'
import { getPayload } from 'payload'
import { Toaster } from 'sonner'

import GoogleAdsense from '@/components/GoogleAdsense'
import GoogleAnalytics from '@/components/GoogleAnalytics'
import Branding from '@/components/common/Branding'
import Footer from '@/payload/blocks/common/Footer'
import Navbar from '@/payload/blocks/common/Navbar'
import Provider from '@/trpc/Provider'
import { MetadataProvider } from '@/utils/metadataContext'

export const getCachedSiteSettings = (organization: string) =>
  unstable_cache(
    async () => {
      const payload = await getPayload({ config: configPromise })

      const { docs } = await payload.find({
        collection: 'SiteSettings',
        draft: false,
        limit: 1,
        where: {
          'tenant.slug': { equals: organization },
        },
      })

      return docs.at(0)
    },
    [`site-settings-${organization}`],
    { tags: [`site-settings-${organization}`] },
  )()

type Props = {
  params: Promise<{ organization: string }>
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>
}

export async function generateMetadata({ params }: Props): Promise<Metadata> {
  const organization = (await params).organization
  try {
    // calling the site-settings to get all the data
    const metadata = await getCachedSiteSettings(organization)
    const generalSettings = metadata?.general

    if (!metadata || !generalSettings) {
      return {
        title: 'My Website',
        description: 'My website description',
      }
    }

    const ogImageUrl =
      typeof generalSettings?.ogImageUrl === 'object'
        ? generalSettings?.ogImageUrl?.url!
        : '/images/seed/og-image.png'

    const title = {
      default: generalSettings?.title,
      template: `%s | ${generalSettings?.title}`,
    }

    const description = generalSettings?.description
    const ogImage = [
      {
        url: `${ogImageUrl}`,
        height: 630,
        width: 1200,
        alt: `og image`,
      },
    ]

    return {
      title,
      description,
      // we're appending the http|https int the env variable
      metadataBase: env.PAYLOAD_URL as unknown as URL,
      openGraph: {
        title,
        description,
        images: ogImage,
      },
      twitter: {
        title,
        description,
        images: ogImage,
      },
      keywords: generalSettings?.keywords,
    }
  } catch (error) {
    // in error case returning a base metadata object
    console.log({ error })

    return {
      title: 'Create CQL App',
      description: 'Generated by create cql app',
    }
  }
}

export const viewport: Viewport = {
  themeColor: 'dark',
  initialScale: 1,
}

export default async function InnerLayout({
  children,
  params,
}: Readonly<{
  children: React.ReactNode
  params: Promise<{ organization: string }> // Removed 'route: string[]' from here
}>) {
  const resolvedParams = await params
  const metadata = await getCachedSiteSettings(resolvedParams.organization)

  return (
    <>
      {/* These components should be moved to body or handled differently */}
      {metadata && metadata.themeSettings && (
        <Branding theme={metadata.themeSettings} />
      )}

      {metadata && metadata?.monetization && (
        <GoogleAdsense monetization={metadata?.monetization} />
      )}
      {metadata && metadata?.monetization && (
        <GoogleAnalytics monetization={metadata?.monetization} />
      )}
      <Provider>
        <MetadataProvider metadata={metadata}>
          <div className='grid min-h-screen w-full grid-rows-[1fr_auto]'>
            {metadata && <Navbar metadata={metadata} />}
            {/* Add top padding when navbar exists */}
            <main className={metadata ? 'pt-14' : ''}>{children}</main>
            {metadata && <Footer metadata={metadata} />}
          </div>
        </MetadataProvider>
      </Provider>

      {/* Sonnar toast library */}
      <Toaster richColors theme='dark' />
    </>
  )
}
